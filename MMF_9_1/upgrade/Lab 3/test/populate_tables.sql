

MERGE INTO USERS
	USING(
		SELECT DISTINCT FIRST_NAME, LAST_NAME, EMAIL, NICKNAME
		FROM DATA_TABLE
		) T1
	ON( T1.FIRST_NAME = USERS.FIRST_NAME AND T1.LAST_NAME = USERS.LAST_NAME AND T1.EMAIL = USERS.EMAIL AND T1.NICKNAME = USERS.NICKNAME)
WHEN NOT MATCHED THEN
	INSERT (FIRST_NAME, LAST_NAME, EMAIL, NICKNAME) VALUES (T1.FIRST_NAME, T1.LAST_NAME, T1.EMAIL, T1.NICKNAME);


MERGE INTO PLAYLIST P
	USING(
		SELECT DISTINCT PLAYLIST_NAME, PLAYLIST_TYPE
		FROM DATA_TABLE) T1
	ON(T1.PLAYLIST_NAME = P.PLAYLIST_NAME)
WHEN NOT MATCHED THEN
	INSERT(P.PLAYLIST_NAME, P.PLAYLIST_CREATOR) VALUES (T1.PLAYLIST_NAME, T1.PLAYLIST_TYPE);


MERGE INTO COMPOSITION_OWNER O
	USING(
		SELECT DISTINCT OWNER_FIRST_NAME, OWNER_LAST_NAME, OWNER_NICKNAME
		FROM DATA_TABLE) T1
	ON (T1.OWNER_FIRST_NAME = O.FIRST_NAME AND T1.OWNER_LAST_NAME = O.LAST_NAME AND T1.OWNER_NICKNAME = O.NICKNAME)
WHEN NOT MATCHED THEN
	INSERT(O.FIRST_NAME, O.LAST_NAME, O.NICKNAME) VALUES (T1.OWNER_FIRST_NAME, T1.OWNER_LAST_NAME, T1.OWNER_NICKNAME);


MERGE INTO COMPOSITION C
	USING(
		SELECT DISTINCT COMPOSITION_NAME, DURATION, COMPOSITION_LIKES, COMPOSITION_LISTENINGS, CO.ID OWNER_ID
		FROM DATA_TABLE TB
		LEFT JOIN COMPOSITION_OWNER CO ON CO.FIRST_NAME = TB.OWNER_FIRST_NAME 
		) T1
	ON (T1.COMPOSITION_NAME = C.COMPOSITION_NAME AND C.OWNER_ID = T1.OWNER_ID)
WHEN NOT MATCHED THEN
	INSERT(C.COMPOSITION_NAME, C.DURATION, C.LIKES_NUMBER, C.LISTENINGS_NUMBER, C.OWNER_ID) VALUES (T1.COMPOSITION_NAME, T1.DURATION, T1.COMPOSITION_LIKES, T1.COMPOSITION_LISTENINGS, T1.OWNER_ID);


MERGE INTO GENRE G
	USING(
		SELECT DISTINCT GENRE, C.ID COMP_ID
		FROM DATA_TABLE DT
		LEFT JOIN COMPOSITION C ON C.COMPOSITION_NAME = DT.COMPOSITION_NAME
		) T1
	ON (G.GENRE_NAME = T1.GENRE AND G.COMPOSITION_ID = T1.COMP_ID)
WHEN NOT MATCHED THEN
	INSERT(G.GENRE_NAME, G.COMPOSITION_ID) VALUES (T1.GENRE, T1.COMP_ID);


MERGE INTO COMPOSITION_REVIEW CR
	USING(
		SELECT DISTINCT USERS.ID USER_ID, C.ID COMP_ID, TRACK_COMMENT, LIKED
		FROM DATA_TABLE DT
		LEFT JOIN USERS ON USERS.FIRST_NAME = DT.FIRST_NAME
		LEFT JOIN COMPOSITION C ON C.COMPOSITION_NAME = DT.COMPOSITION_NAME) T1
	ON (CR.USER_ID = T1.USER_ID AND CR.COMPOSITION_ID = T1.COMP_ID AND CR.REVIEW = T1.TRACK_COMMENT)
WHEN NOT MATCHED THEN
	INSERT(CR.USER_ID, CR.COMPOSITION_ID, CR.REVIEW, CR.LIKED) VALUES (T1.USER_ID, T1.COMP_ID, T1.TRACK_COMMENT, T1.LIKED);


MERGE INTO USER_STATE US
	USING(
		SELECT DISTINCT USERS.ID USER_ID, C.ID COMP_ID, CURRENT_LISTENING, PAUSE_TIME
		FROM DATA_TABLE DT
		LEFT JOIN USERS ON USERS.FIRST_NAME = DT.FIRST_NAME
		LEFT JOIN COMPOSITION C ON C.COMPOSITION_NAME = DT.COMPOSITION_NAME) T1
	ON (US.USER_ID = T1.USER_ID AND US.COMPOSITION_ID = T1.COMP_ID AND US.CURRENT_COMPOSITION = T1.CURRENT_LISTENING)
WHEN NOT MATCHED THEN
	INSERT(US.USER_ID, US.COMPOSITION_ID, US.CURRENT_COMPOSITION, US.PAUSE_TIME) VALUES (T1.USER_ID, T1.COMP_ID, T1.CURRENT_LISTENING, T1.PAUSE_TIME);


MERGE INTO USER_PLAYLIST PC
	USING(
		SELECT DISTINCT USERS.ID USER_ID, PLAYLIST.ID PLAYLIST_ID
		FROM DATA_TABLE DT
		LEFT JOIN USERS ON USERS.FIRST_NAME = DT.FIRST_NAME
		LEFT JOIN PLAYLIST ON PLAYLIST.PLAYLIST_NAME = DT.PLAYLIST_NAME) T1
	ON (PC.USER_ID = T1.USER_ID AND PC.PLAYLIST_ID = T1.PLAYLIST_ID)
	WHEN NOT MATCHED THEN
		INSERT(PC.USER_ID, PC.PLAYLIST_ID) VALUES (T1.USER_ID, T1.PLAYLIST_ID);